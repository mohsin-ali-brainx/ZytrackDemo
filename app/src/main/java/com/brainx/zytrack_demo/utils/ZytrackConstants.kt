package com.brainx.zytrack_demo.utils

import androidx.databinding.ObservableField
import androidx.lifecycle.MutableLiveData

object ZytrackConstant {
    const val Error = "error"
    const val SERVER_ERROR = "Server Error"
    const val ENTER_EMAIL = "Please Enter Email"
    const val ENTER_PASSWORD = "Please Enter Password"
    const val ENTER_VALID_EMAIL = "Enter a valid email"
    const val ENTER_VALID_PASSWORD = "Enter a valid password"
    const val APP_PLATFORM = "android"
    const val APP_VERSION = "1"
    const val CONTENT_TYPE_KEY = "content-type"
    const val ACCESS_TOKEN_KEY = "access-token"
    const val CLIENT_KEY = "client"
    const val UID_KEY = "uid"
    const val APP_PLATFORM_KEY = "App-Platform"
    const val APP_VERSION_KEY = "App-Version"
    const val CONTENT_TYPE_VALUE = "application/json"
    const val DEVICE_TOKEN_VALUE = "AAAAR5AMOm4:APA91bEJqOls8Hntj0Ki-umpklMNMue8WZbIA8Ry-F31rVk7aNB9LAVnC3EFockxGCxCELPk5BiuwKO-bivmMl5eIZE2p4qRT3LaMIzzf9cgOx8ehCwwtwePh5N0KfxkQUJ-SOGBNw8L"
    const val GO_TO_SETTINGS = "Go to Settings"
    const val LOCATION_PERMISSION = "Location Permission"
    const val LOCATION_PERMISSION_MSG = "This app needs permission to use this feature. You can grant them in app settings."
    const val CONFIRMATION="Confirmation"
    const val SAVE="Are you sure you want to save?"
    const val DELETE="Are you sure you want to delete?"
    const val MAP_VIEW_BUNDLE_KEY="MapViewBundleKey"
    const val HIPHAN = "-"
    const val UNDER_SCORE = "_"
    const val DELAY:Long=0
    const val SECOND:Long=1000
    const val ZERO = 0
    const val ONE = 1
    const val TWELVE = 12
    const val ZERO_LONG:Long = 0
    const val MY_LOCATION = "My Location"
    const val ERROR= "Error"
    const val OK="OK"
    const val GERMAN="german"
    const val EN="en"
    const val DE="de"
    const val TOTAL_FRAGMENTS=4
    const val CURRENT_LOCATION_MSG = "Current Location Button Clicked"
    const val BLOCKED_ERROR_CODE = 403
    var TEMPORARY_LOCALE : String? = null
    var APP_DEFAULT_LOCALE : String? = null
    const val ACCESS_TOKEN_HEADER_KEY = "Access-Token"
    const val CLIENT_HEADER_KEY = "Client"
    const val UI_TOKEN_HEADER_KEY = "Uid"
    const val CLIENT_ID = "selected_client_id"
    const val PROJECT_ID = "selected_project_id"
    const val WORK_TYPE_LIST = "work_type_list"
    const val SELECTION_TYPE = "selection_type"
    const val SELECTION_RESPONSE = "selection_response"
    const val CLIENT_SELECTION_VALUE = 1
    const val PROJECT_SELECTION_VALUE= 2
    const val WORK_TYPE_SELECTION_VALUE = 3
    const val SELECT_CLIENT_REQUEST_CODE = 1001
    const val SELECT_PROJECT_REQUEST_CODE = 1002
    const val SELECT_HOUR_TYPE_REQUEST_CODE = 1003
    const val SELECT_CLIENT_RESULT_CODE = 2001
    const val SELECT_PROJECT_RESULT_CODE = 2002
    const val SELECT_HOUR_TYPE_RESULT_CODE = 2003
    const val WORK_INTERVAL = "work"
    const val BREAK_INTERVAL = "break"
    const val TIMER_DIALOG_TAG = "timer_dialog"
    const val DEFAULT_TIME = "00:00 am"
    const val DEFAULT_INTERVAL = "00:00:00"
    const val AM = "AM"
    const val PM = "PM"
    const val DATE = "date"
    const val SUCCESS= "Success"
    const val ADD_MSG= "Your data has been added successfully"
    const val TIME_SHEET_INTERVAL_KEY = "time_sheet_interval"
    const val ZERO_AXIS = 0
    const val TIME_SHEET_MODEL_INTENT_KEY = "time_sheet_interval_model_key"
    const val EDIT_KEY = "edit"
    const val DATE_KEY = "selected_key"
    var dataUpdated = ObservableField<Boolean>(false)
    var dataSaved = ObservableField<Boolean>(false)
    const val NEGATIVE_ONE = -1
    var APP_LOCALE:String? = EN
    const val SPLASH_TIME = 2000L
    const val SESSION_TIMEOUT_ERROR_CODE = 401
    const val TIMER_FOREGROUND_ID = 9001
    const val TIMER_NOTIFICATION_TITLE = "notification_title"
    const val TIMER_NOTIFICATION_DESCRIPTION = "notification_description"
    const val TIMER_NOTIFICATION_REQUEST_CODE = 100
    const val UPDATE_TIMER_NOTIFICATION_REQUEST_CODE = 101
    const val TIMER_TYPE = "timer_type"
    const val WORK_TIME_ACTION = "work_action"
    const val BREAK_TIME_ACTION = "work_action"
    const val WORK_TIME_DURATION = "work_duration"
    const val BREAK_TIME_DURATION = "break_duration"
    var workDuration = MutableLiveData<String>()
    var breakDuration = MutableLiveData<String>()
    var isTempLoggedIn = ObservableField<Boolean>(false)

    const val REQUEST_CODE_CAMERA_PERMISSION = 0
    const val FILENAME_FORMAT = "yyyy-MM-dd-HH-mm-ss-SSS"
    const val TAG = "CameraXExample"


    const val ORIGINAL_FILE_KEY = "original_file"
    const val CROPPED_PHOTO_KEY = "cropped_photo"
    const val NO_IMAGE_URL = "https://upload.wikimedia.org/wikipedia/commons/a/ac/No_image_available.svg"
}